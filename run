#!/bin/bash
#
# A script to make working with docker/compose to have
# less typing.
#
# For local development only.

UI_PATH="source/SIL.AppBuilder.Portal.Frontend"
API_PATH="source/OptimaJet.DWKit.StarterApplication"
COMPOSE="docker-compose -f deployment/development/docker-compose.yml --project-directory ./source -p appbuilder-portal"

function runstuff {
  # First arg
  given_command=$1
  # The rest of the args
  arguments=${@:2}

  case $given_command in
    # docker-compose proxy
    dc)       ${COMPOSE} $arguments;;
    up:build) ${COMPOSE} up --build $arguments;;
    up)       ${COMPOSE} up $arguments;;
    up:local:start)
      runstuff dc start db
      runstuff dc start adminer

      echo "db and adminer have been started. please make sure you have /etc/hosts entries"
      echo ""
      echo "  127.0.0.1 db.docker"
      echo "  127.0.0.1 api"
      echo "  127.0.0.1 adminer"
      echo ""
      echo "if you need to connect to these services from locally run api and ui"
      echo ""
      echo "also make sure any environment variables present in docker-compose.yml"
      echo "for the non-running services are present when booting up the services"
      echo "on the host environment (use .env.dev files to make this simpler)"
      echo ""
      echo "why?"
      echo "because currently, docker-compose doesn't have a way to omit files / folders"
      echo "from volume mounts, so whenever dotnet watch would do a rebuild inside the"
      echo "docker environment, it would blow away all the host-dependencies that the"
      echo "editor was using for intellisense..."

      runstuff dc ps
      runstuff dc logs --follow --tail="2"
    ;;

    bash)     ${COMPOSE} run --rm $arguments bash;;
    restart)  ${COMPOSE} stop $arguments && ${COMPOSE} start $arguments;;

    db:update) ${COMPOSE} exec api bash -c "dotnet ef database update";;
    db:migrate) ${COMPOSE} exec api bash -c "dotnet ef migrations ${arguments}";;

    bootstrap)
      echo "api must not be running in order to run the initial db scripts ..."
      runstuff dc stop api


      # Setup Database
      PSQL="PGPASSWORD=\$POSTGRES_PASSWORD psql -h localhost -U \$POSTGRES_USER"

      ${COMPOSE} exec db bash -c "${PSQL} -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = '\$POSTGRES_DB'\" | grep -q 1 && ${PSQL} -d postgres -c \"DROP DATABASE \$POSTGRES_DB\""
      ${COMPOSE} exec db bash -c "${PSQL} -d postgres -c \"CREATE DATABASE \$POSTGRES_DB WITH ENCODING 'UTF8'\""

      ${COMPOSE} exec db bash -c "${PSQL} -d \$POSTGRES_DB -f /scripts/PostgreSQL/DWKitScript.sql" \
        && ${COMPOSE} exec db bash -c "${PSQL} -d \$POSTGRES_DB -f /scripts/PostgreSQL/Workflow_CreatePersistenceObjects.sql" \
        && echo "DB setup with DWKit Scripts"

      echo "api must be running in order to run the db migration scripts ..."
      runstuff dc start api

      runstuff db:update && echo "DB setup for json:api"

      # other things...?
    ;;

    ##################
    # Testing
    ci:test:ui) bash -c "./run dc run --rm ui yarn test:ci";;
    ci:lint:ui) bash -c "./run dc run --rm ui yarn lint";;


    ################
    # Host-Machine Utils

    # frontend things
    yarn) ( cd $UI_PATH && yarn $arguments );;

    # backend / api things
    dotnet) ( cd $API_PATH && dotnet $arguments );;
    # dotnet:api)

    # Don't name any folders bin, obj, tmp, dist, or node_modules
    clean:all)
      echo "Cleaning..."
      runstuff clean:frontend
      runstuff clean:relays
    ;;

    clean:api)
      shopt -s globstar
      rm -rf **/bin && \
      rm -rf **/obj
    ;;

    clean:frontend)
      shopt -s globstar
      rm -rf **/dist && \
      rm -rf **/node_modules && \
      rm -rf **/tmp
    ;;

    *) print_help;;
  esac
}

function print_help {

  echo ""
  echo "Available Commands:"
  echo ""
  echo "dc             : short for docker-compose"
  echo "up:build"
  echo "up"
  echo "up:local:start : starts non-essential services in docker, and the api and ui services natively on the host machine"
  echo ""
  echo "bash           : drop into a bash shell in a temporary docker-compose service"
  echo "restart        : restart a specific docker-compose service"
  echo ""
  echo "bootstrap      : runs initial scripts for project setup"
  echo ""
  echo "yarn"
  echo ""
  echo "dotnet"
  echo ""
  echo "clean:all      : recursively removes dist, node_modules, and tmp directories"
  echo "clean:api"
  echo "clean:frontend"
}

if [ $1 ]; then
  runstuff $*
else
  print_help
fi
